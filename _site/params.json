{"name":"imolecule","tagline":"An embeddable webGL molecule viewer and file format converter.","body":"Examples\r\n=========\r\n\r\nUsage\r\n=====\r\n\r\n```javascript\r\nimolecule.create('my-selector');\r\nimolecule.draw(myMolecule);\r\n```\r\n\r\nwhere `'my-selector'` is where you want to place imolecule, and `myMolecule` is\r\nan object. See below for more on the object structure, or just check out the\r\nincluded examples. The `imolecule.create()` method takes a few optional parameters,\r\nspecifying a few common drawing and camera types.\r\n\r\nMolecule Data Format\r\n====================\r\n\r\nAt its core, imolecule takes input chemical structures as javascript objects.\r\nAs an example, consider benzene:\r\n\r\n```javascript\r\n{\r\n    atoms: [\r\n        { element: \"C\", location: [ -0.762160, 1.168557, 0.022754 ] },\r\n        { element: \"C\", location: [ 0.631044, 1.242862, -0.013022 ] },\r\n        { element: \"C\", location: [ 1.391783, 0.076397, -0.012244 ] },\r\n        { element: \"C\", location: [ 0.762101, -1.168506, 0.026080 ] },\r\n        { element: \"C\", location: [ -0.631044, -1.242903, -0.011791 ] },\r\n        { element: \"C\", location: [ -1.391806, -0.076430, -0.014083 ] },\r\n    ],\r\n    bonds: [\r\n        { atoms: [ 0, 1 ], order: 2 },\r\n        { atoms: [ 1, 2 ], order: 1 },\r\n        { atoms: [ 2, 3 ], order: 2 },\r\n        { atoms: [ 3, 4 ], order: 1 },\r\n        { atoms: [ 4, 5 ], order: 2 },\r\n        { atoms: [ 0, 5 ], order: 1 }\r\n    ]\r\n}\r\n```\r\n\r\nIf you want to make properly formatted JSON, you can use either `format_converter.py` as a script\r\nor a running imolecule instance (like [this one](http://www.patrick-fuller.com/imolecule.html))\r\nto convert most chemical file formats to JSON.\r\n\r\nChemical File Format Conversion\r\n===============================\r\n\r\nThis program optionally uses [tornado](http://www.tornadoweb.org/en/stable/) and [zeroMQ](http://zeromq.org/) to connect to a server that handles chemical file format conversion with [Open Babel](http://openbabel.org/wiki/Main_Page).\r\n\r\nTo run in its provided state, you will need some zeroMQ's Python bindings, Tornado, and Tornadio.\r\n\r\n```\r\npip install pyzmq tornado tornadio\r\n```\r\n\r\nYou will also need Open Babel, which is best installed from source. For more, read through the [Open Babel installation instructions](http://openbabel.org/docs/dev/Installation/install.html).\r\n\r\n```\r\ngit clone https://github.com/openbabel/openbabel\r\nmkdir build && cd build\r\ncmake ../openbabel -DPYTHON_BINDINGS=ON\r\nmake && make install\r\n```\r\n\r\nOnce this is set up, run the full program with\r\n\r\n```\r\npython server.py\r\n```\r\n\r\nThe default site allows for loading molecules via a simple file drag-and-drop interface.\r\nDrag a file to anywhere in the browser and drop to load. This interface\r\ncommunicates with openbabel via websocket, so most file formats should work. Be\r\nsure to set the extensions of your files to their data type (ie. \"mol\", \"pdb\",\r\netc.) for format inference to work properly.\r\n\r\nIf you have an existing web server, tornado can be easily switched out for other libraries. If you want to use imolecule as a starting point for a broader user interface, the server is written to be extensible. In both cases, read through the source code - it's surprisingly short.\r\n\r\nIPython support\r\n===============\r\n\r\nThe IPython notebook is an open-source tool poised to replace MATLAB in many\r\napplications. As a scientist of sorts, I'm all about it. Therefore, I made\r\nhandles to use imolecule with the notebook.\r\n\r\nOpen a new notebook and make sure that the imolecule\r\ndirectory is either in the directory you started the notebook or your\r\nPYTHONPATH. You can test the setup by typing:\r\n\r\n```python\r\nimport imolecule\r\nimolecule.draw(\"CC1(C(N2C(S1)C(C2=O)NC(=O)CC3=CC=CC=C3)C(=O)O)C\")\r\n```\r\n\r\ninto a notebook cell. This should convert, optimize and draw the specified\r\nSMILES structure (in this case, penicillin) into the notebook.\r\n\r\nThe drawer can handle any format specified [here](http://openbabel.org/docs/2.3.1/FileFormats/Overview.html),\r\nand can be set up to better handle different use cases. Check out the docstrings\r\nassociated with the IPython interface for more.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}